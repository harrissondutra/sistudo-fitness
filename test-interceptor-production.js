/**
 * üåê SCRIPT DE TESTE EM PRODU√á√ÉO
 *
 * ‚ö†Ô∏è  IMPORTANTE: Este script deve ser usado APENAS no ambiente de PRODU√á√ÉO
 *
 * Como usar:
 * 1. Acesse sua aplica√ß√£o em PRODU√á√ÉO (ex: https://sistudo-fitness.vercel.app)
 * 2. Fa√ßa login com suas credenciais
 * 3. Abra o console do navegador (F12)
 * 4. Cole este script inteiro no console
 * 5. Execute: testProductionInterceptor()
 */

// Detectar automaticamente o ambiente
const isProduction = !window.location.hostname.includes('localhost') &&
                    !window.location.hostname.includes('127.0.0.1') &&
                    !window.location.hostname.includes('4200');

const API_BASE_URL = 'https://api-sistudo-fitness-production.up.railway.app';

window.testProductionInterceptor = async function() {
  console.log('üåê [PRODU√á√ÉO] =================================');
  console.log('üåê [PRODU√á√ÉO] TESTE DO INTERCEPTOR EM PRODU√á√ÉO');
  console.log('üåê [PRODU√á√ÉO] =================================');

  // 1. Verificar ambiente
  console.log('üåê [PRODU√á√ÉO] URL atual:', window.location.href);
  console.log('üåê [PRODU√á√ÉO] √â produ√ß√£o?', isProduction ? 'SIM ‚úÖ' : 'N√ÉO ‚ö†Ô∏è');

  if (!isProduction) {
    console.warn('‚ö†Ô∏è  [PRODU√á√ÉO] ATEN√á√ÉO: Voc√™ n√£o est√° em produ√ß√£o!');
    console.warn('‚ö†Ô∏è  [PRODU√á√ÉO] Este script √© para ambiente de produ√ß√£o.');
  }

  // 2. Verificar token
  const token = sessionStorage.getItem('token');
  if (!token) {
    console.error('‚ùå [PRODU√á√ÉO] ERRO: Nenhum token encontrado!');
    console.error('‚ùå [PRODU√á√ÉO] SOLU√á√ÉO: Fa√ßa login primeiro');
    return false;
  }

  console.log('‚úÖ [PRODU√á√ÉO] Token encontrado:', token.substring(0, 30) + '...');

  // 3. Verificar informa√ß√µes do usu√°rio
  const userInfo = sessionStorage.getItem('userInfo');
  if (userInfo) {
    const user = JSON.parse(userInfo);
    console.log('üë§ [PRODU√á√ÉO] Usu√°rio logado:', user.username || user.email);
    console.log('üîë [PRODU√á√ÉO] Role:', user.role);
  }

  // 4. Testar conectividade com a API
  console.log('üîó [PRODU√á√ÉO] Testando conectividade com API...');

  try {
    // Teste 1: Requisi√ß√£o simples
    console.log('üì° [PRODU√á√ÉO] Teste 1: Listagem de clientes...');
    const response1 = await fetch(`${API_BASE_URL}/clients/listAll`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });

    console.log('üìä [PRODU√á√ÉO] Status:', response1.status);
    console.log('üìä [PRODU√á√ÉO] Status Text:', response1.statusText);

    if (response1.ok) {
      const data1 = await response1.json();
      console.log('‚úÖ [PRODU√á√ÉO] SUCESSO! Clientes recebidos:', data1.length);

      // Teste 2: Requisi√ß√£o de usu√°rios
      console.log('üì° [PRODU√á√ÉO] Teste 2: Listagem de usu√°rios...');
      const response2 = await fetch(`${API_BASE_URL}/users`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });

      if (response2.ok) {
        const data2 = await response2.json();
        console.log('‚úÖ [PRODU√á√ÉO] SUCESSO! Usu√°rios recebidos:', data2.length);

        // Teste 3: Requisi√ß√£o de exerc√≠cios
        console.log('üì° [PRODU√á√ÉO] Teste 3: Listagem de exerc√≠cios...');
        const response3 = await fetch(`${API_BASE_URL}/exercises/list`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        });

        if (response3.ok) {
          const data3 = await response3.json();
          console.log('‚úÖ [PRODU√á√ÉO] SUCESSO! Exerc√≠cios recebidos:', data3.length);

          // RESULTADO FINAL
          console.log('üéâ [PRODU√á√ÉO] ================================');
          console.log('üéâ [PRODU√á√ÉO] TODOS OS TESTES PASSARAM!');
          console.log('üéâ [PRODU√á√ÉO] INTERCEPTOR FUNCIONANDO 100%');
          console.log('üéâ [PRODU√á√ÉO] ================================');
          console.log('‚úÖ [PRODU√á√ÉO] ‚úì Autentica√ß√£o funcionando');
          console.log('‚úÖ [PRODU√á√ÉO] ‚úì Headers sendo enviados');
          console.log('‚úÖ [PRODU√á√ÉO] ‚úì API respondendo');
          console.log('‚úÖ [PRODU√á√ÉO] ‚úì Dados sendo recebidos');
          console.log('üöÄ [PRODU√á√ÉO] Sistema pronto para uso!');

          return true;

        } else {
          console.warn('‚ö†Ô∏è  [PRODU√á√ÉO] Exerc√≠cios falharam, mas clientes funcionaram');
        }
      } else {
        console.warn('‚ö†Ô∏è  [PRODU√á√ÉO] Usu√°rios falharam, mas clientes funcionaram');
      }

      console.log('‚úÖ [PRODU√á√ÉO] INTERCEPTOR FUNCIONANDO (parcial)');
      return true;

    } else if (response1.status === 401) {
      console.error('‚ùå [PRODU√á√ÉO] ERRO 401: Token inv√°lido ou expirado');
      console.error('‚ùå [PRODU√á√ÉO] SOLU√á√ÉO: Fa√ßa logout e login novamente');
      return false;

    } else if (response1.status === 403) {
      console.error('‚ùå [PRODU√á√ÉO] ERRO 403: Acesso negado');
      console.error('‚ùå [PRODU√á√ÉO] SOLU√á√ÉO: Verificar permiss√µes do usu√°rio');
      return false;

    } else {
      console.error('‚ùå [PRODU√á√ÉO] ERRO', response1.status + ':', response1.statusText);
      const errorText = await response1.text();
      console.error('‚ùå [PRODU√á√ÉO] Detalhes:', errorText);
      return false;
    }

  } catch (error) {
    console.error('üí• [PRODU√á√ÉO] ERRO DE REDE:', error.message);
    console.error('üí• [PRODU√á√ÉO] Verificar:');
    console.error('   ‚Ä¢ Conectividade com internet');
    console.error('   ‚Ä¢ Status da API:', API_BASE_URL);
    console.error('   ‚Ä¢ CORS configurado corretamente');
    return false;
  }
};

// Fun√ß√£o para testar o interceptor Angular em produ√ß√£o
window.testAngularInterceptorProduction = function() {
  console.log('üÖ∞Ô∏è [PRODU√á√ÉO-ANGULAR] Testando interceptor Angular...');

  // Verificar se est√° em produ√ß√£o
  if (!isProduction) {
    console.warn('‚ö†Ô∏è  [PRODU√á√ÉO-ANGULAR] Este teste √© para ambiente de produ√ß√£o');
  }

  // Tentar acessar componente Angular
  const angularElement = document.querySelector('app-root') ||
                        document.querySelector('app-home') ||
                        document.querySelector('[ng-version]');

  if (angularElement) {
    console.log('‚úÖ [PRODU√á√ÉO-ANGULAR] Aplica√ß√£o Angular encontrada');

    if (window.ng) {
      console.log('‚úÖ [PRODU√á√ÉO-ANGULAR] Angular DevTools dispon√≠vel');
      console.log('üîç [PRODU√á√ÉO-ANGULAR] Comandos dispon√≠veis:');
      console.log('   ng.getComponent($0) - Acessar componente selecionado');
      console.log('   ng.getAllAngularRootElements() - Todos elementos Angular');
    } else {
      console.log('‚ÑπÔ∏è [PRODU√á√ÉO-ANGULAR] Angular DevTools n√£o dispon√≠vel em produ√ß√£o');
      console.log('‚ÑπÔ∏è [PRODU√á√ÉO-ANGULAR] Isso √© normal - use testProductionInterceptor()');
    }
  } else {
    console.error('‚ùå [PRODU√á√ÉO-ANGULAR] Aplica√ß√£o Angular n√£o encontrada');
  }
};

// Fun√ß√£o para verificar logs do interceptor (s√≥ funciona em dev)
window.checkInterceptorLogs = function() {
  console.log('üìù [LOGS] Verificando logs do interceptor...');

  if (isProduction) {
    console.log('‚ÑπÔ∏è [LOGS] Em produ√ß√£o, logs do interceptor s√£o desabilitados');
    console.log('‚ÑπÔ∏è [LOGS] Isso √© normal e melhora a performance');
    console.log('‚úÖ [LOGS] Para testar, use: testProductionInterceptor()');
  } else {
    console.log('üîç [LOGS] Em desenvolvimento, procure por:');
    console.log('   üî• [AUTH-INTERCEPTOR] Interceptando requisi√ß√£o');
    console.log('   üî• [AUTH-INTERCEPTOR] Token encontrado');
  }
};

// Auto-executar informa√ß√µes b√°sicas
console.log('üåê [SETUP] Script de teste de produ√ß√£o carregado!');
console.log('üåê [SETUP] Ambiente detectado:', isProduction ? 'PRODU√á√ÉO' : 'DESENVOLVIMENTO');
console.log('üåê [SETUP] ===================================');
console.log('üìù [SETUP] Comandos dispon√≠veis:');
console.log('   ‚Ä¢ testProductionInterceptor() - Teste completo');
console.log('   ‚Ä¢ testAngularInterceptorProduction() - Teste Angular');
console.log('   ‚Ä¢ checkInterceptorLogs() - Verificar logs');
console.log('üåê [SETUP] ===================================');

if (isProduction) {
  console.log('üöÄ [SETUP] Voc√™ est√° em PRODU√á√ÉO!');
  console.log('üîç [SETUP] Execute: testProductionInterceptor()');
} else {
  console.log('‚ö†Ô∏è  [SETUP] Voc√™ est√° em DESENVOLVIMENTO');
  console.log('üí° [SETUP] Este script funciona melhor em produ√ß√£o');
}
