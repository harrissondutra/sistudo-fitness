import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from '../../environments/environment';
import { AuthService } from './auth.service';

/**
 * üîç DIAGN√ìSTICO DE PRODU√á√ÉO
 * Testa se o interceptor funciona corretamente em produ√ß√£o
 */
@Injectable({
  providedIn: 'root'
})
export class ProductionInterceptorTestService {

  constructor(
    private http: HttpClient,
    private authService: AuthService
  ) {}

  /**
   * Testa se o interceptor est√° funcionando
   * Faz uma requisi√ß√£o simples e verifica os headers
   */
  async testInterceptorInProduction(): Promise<boolean> {
    try {
      const token = this.authService.getToken();

      if (!token) {
        console.warn('üîç [PRODU√á√ÉO] Sem token - interceptor n√£o pode ser testado');
        return false;
      }

      // Faz uma requisi√ß√£o de teste
      const response = await this.http.get(`${environment.apiUrl}/clients/listAll`).toPromise();

      // Se chegou aqui, o interceptor funcionou
      console.log('‚úÖ [PRODU√á√ÉO] Interceptor funcionando - requisi√ß√£o autorizada com sucesso');
      return true;

    } catch (error: any) {
      if (error.status === 401) {
        console.error('‚ùå [PRODU√á√ÉO] Interceptor FALHOU - requisi√ß√£o n√£o autorizada');
        return false;
      } else if (error.status === 403) {
        console.error('‚ùå [PRODU√á√ÉO] Interceptor FALHOU - acesso negado');
        return false;
      } else {
        console.warn('‚ö†Ô∏è [PRODU√á√ÉO] Erro de rede, mas interceptor pode estar funcionando:', error.message);
        return true; // Assume que o interceptor funcionou se n√£o for erro de auth
      }
    }
  }

  /**
   * Diagn√≥stico completo para produ√ß√£o
   */
  async runProductionDiagnostics(): Promise<void> {
    console.log('üîç [PRODU√á√ÉO] Iniciando diagn√≥sticos...');

    // 1. Verificar se est√° em produ√ß√£o
    console.log('üîç [PRODU√á√ÉO] Environment:', environment.production ? 'PRODU√á√ÉO' : 'DESENVOLVIMENTO');
    console.log('üîç [PRODU√á√ÉO] API URL:', environment.apiUrl);

    // 2. Verificar token
    const token = this.authService.getToken();
    console.log('üîç [PRODU√á√ÉO] Token presente:', !!token);

    // 3. Testar interceptor
    const interceptorWorking = await this.testInterceptorInProduction();
    console.log('üîç [PRODU√á√ÉO] Interceptor funcionando:', interceptorWorking);

    // 4. Resultado final
    if (interceptorWorking) {
      console.log('‚úÖ [PRODU√á√ÉO] SUCESSO - Sistema pronto para produ√ß√£o!');
    } else {
      console.error('‚ùå [PRODU√á√ÉO] FALHA - Verificar configura√ß√£o do interceptor');
    }
  }
}
