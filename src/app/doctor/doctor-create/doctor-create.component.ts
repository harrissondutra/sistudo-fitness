import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { Router } from '@angular/router'; // Only Router is needed for navigation, not ActivatedRoute
import { MatSnackBar } from '@angular/material/snack-bar';

// Angular Material & Ionic imports for standalone component
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner'; // Still good for submit loading
import { IonicModule } from '@ionic/angular';

// Import your Doctor interface and DoctorService
import { Doctor } from '../../models/doctor'; // Adjust path if necessary
import { DoctorService } from '../../services/doctor/doctor.service'; // Adjust path if necessary

@Component({
  selector: 'app-doctor-create',
  standalone: true, // Assuming this is a standalone component
  imports: [
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatProgressSpinnerModule,
    IonicModule
  ],
  templateUrl: './doctor-create.component.html',
  styleUrl: './doctor-create.component.scss'
})
export class DoctorCreateComponent implements OnInit {
  doctorForm!: FormGroup;
  isLoading = false; // To show loading spinner during form submission

  constructor(
    private fb: FormBuilder,
    private router: Router, // To navigate back after creation
    private doctorService: DoctorService,
    private snackBar: MatSnackBar
  ) { }

  ngOnInit(): void {
    this.initializeForm();
  }

  /**
   * Initializes the FormGroup for creating a new doctor.
   */
  initializeForm(): void {
    this.doctorForm = this.fb.group({
      // 'id' is intentionally left out for creation, as it's typically generated by the backend
      name: ['', Validators.required],
      crm: ['', Validators.required],
      specialty: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      phone: [''],
      clientId: [null] // Can be null for new creation, or have a default value/selection
    });
  }

  /**
   * Handles the form submission to create a new doctor.
   */
  onSubmit(): void {
    if (this.doctorForm.valid) {
      this.isLoading = true; // Activate loading indicator
      const newDoctor: Doctor = this.doctorForm.value;

      // Call the service to create the doctor
      this.doctorService.createDoctor(newDoctor).subscribe({
        next: () => {
          this.snackBar.open('Médico cadastrado com sucesso!', 'Fechar', { duration: 3000 });
          this.router.navigate(['/doctors']); // Navigate to the doctor list after success
          this.isLoading = false; // Deactivate loading indicator
        },
        error: (error) => {
          console.error('Erro ao cadastrar médico:', error);
          this.snackBar.open('Erro ao cadastrar médico. Tente novamente.', 'Fechar', { duration: 3000 });
          this.isLoading = false; // Deactivate loading indicator on error
        }
      });
    } else {
      // Mark all fields as touched to display validation errors
      this.doctorForm.markAllAsTouched();
      this.snackBar.open('Por favor, preencha todos os campos obrigatórios corretamente.', 'Fechar', { duration: 3000 });
    }
  }

  /**
   * Cancels the operation and navigates back to the doctor list.
   */
  onCancel(): void {
    this.router.navigate(['/doctors']);
  }
}
